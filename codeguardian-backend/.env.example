# CodeGuardian Backend - Environment Configuration
# Copy this file to .env and fill in your actual values

# ============================================
# REQUIRED - Application will not start without these
# ============================================

# Flask Environment (development, testing, production, render)
FLASK_ENV=development

# Secret Keys - MUST BE CHANGED IN PRODUCTION
# Generate with: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=your-secret-key-change-in-production
JWT_SECRET=your-jwt-secret-change-in-production
JWT_SECRET_KEY=your-jwt-secret-key-change-in-production

# OpenAI API Configuration
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-4
OPENAI_API_BASE=https://api.openai.com/v1
OPENAI_TIMEOUT=60

# Database Configuration
# For development (SQLite):
DATABASE_URL=sqlite:///codeguardian.db
# For production (PostgreSQL):
# DATABASE_URL=postgresql://user:password@localhost:5432/codeguardian
# For Render.com, this is automatically provided

# ============================================
# RECOMMENDED - Strongly recommended for production
# ============================================

# Redis Configuration (for caching and rate limiting)
REDIS_URL=redis://localhost:6379/0

# CORS Configuration (comma-separated list of allowed origins)
# For development:
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080
# For production:
# CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# GitHub OAuth Configuration (if using GitHub authentication)
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_REDIRECT_URI=/api/auth/github/callback

# ============================================
# OPTIONAL - Email and Monitoring
# ============================================

# Email Configuration (for notifications)
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-email-password
SMTP_USE_TLS=true

# Monitoring (Sentry for error tracking)
SENTRY_DSN=your-sentry-dsn-here

# ============================================
# FEATURE FLAGS
# ============================================

# Enable/disable features
ENABLE_REGISTRATION=true
ENABLE_GITHUB_OAUTH=true
ENABLE_EMAIL_NOTIFICATIONS=true
ENABLE_METRICS=true

# ============================================
# SECURITY SETTINGS
# ============================================

# Rate Limiting
RATE_LIMIT=100 per hour
# For authenticated users:
# RATE_LIMIT_AUTHENTICATED=1000 per hour

# Session Configuration
SESSION_COOKIE_SECURE=false  # Set to true in production with HTTPS
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=Lax

# CSRF Protection
WTF_CSRF_ENABLED=false  # Set to true in production
WTF_CSRF_TIME_LIMIT=3600

# ============================================
# PERFORMANCE SETTINGS
# ============================================

# Worker Configuration (for Gunicorn)
WORKER_PROCESSES=2
WORKER_CONNECTIONS=1000
MAX_REQUESTS=1000

# File Upload Configuration
MAX_CONTENT_LENGTH=16777216  # 16MB in bytes
UPLOAD_FOLDER=uploads

# ============================================
# LOGGING CONFIGURATION
# ============================================

# Log Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO
LOG_FORMAT=json

# ============================================
# DEVELOPMENT ONLY SETTINGS
# ============================================

# Flask Debug Mode (NEVER set to true in production)
FLASK_DEBUG=true

# Database Query Logging (for debugging)
SQLALCHEMY_ECHO=false

# ============================================
# RENDER.COM SPECIFIC (auto-detected)
# ============================================

# PORT is automatically set by Render
# PORT=5000

# RENDER is automatically set by Render platform
# RENDER=true

# ============================================
# QUICK START COMMANDS
# ============================================

# 1. Copy this file:
#    cp .env.example .env

# 2. Generate secure secret keys:
#    python -c "import secrets; print('SECRET_KEY=' + secrets.token_hex(32))"
#    python -c "import secrets; print('JWT_SECRET=' + secrets.token_hex(32))"
#    python -c "import secrets; print('JWT_SECRET_KEY=' + secrets.token_hex(32))"

# 3. Set your OpenAI API key:
#    Get from: https://platform.openai.com/api-keys

# 4. For production, set DATABASE_URL to PostgreSQL:
#    DATABASE_URL=postgresql://user:pass@host:5432/dbname

# 5. Configure CORS_ORIGINS for your frontend domain

# 6. Enable security features:
#    WTF_CSRF_ENABLED=true
#    SESSION_COOKIE_SECURE=true
#    RATE_LIMIT=100 per hour

# ============================================
# SECURITY CHECKLIST FOR PRODUCTION
# ============================================

# ✓ Change all SECRET_KEY values to random strings
# ✓ Set OPENAI_API_KEY to your actual key
# ✓ Set DATABASE_URL to PostgreSQL (not SQLite)
# ✓ Set CORS_ORIGINS to your actual domain(s)
# ✓ Set FLASK_ENV=production
# ✓ Set FLASK_DEBUG=false
# ✓ Set SESSION_COOKIE_SECURE=true (requires HTTPS)
# ✓ Set WTF_CSRF_ENABLED=true
# ✓ Set up REDIS_URL for caching and rate limiting
# ✓ Set SENTRY_DSN for error monitoring
# ✓ Configure SMTP for email notifications
# ✓ Set appropriate RATE_LIMIT values
# ✓ Review and set all security settings above
