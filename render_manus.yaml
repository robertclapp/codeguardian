# Render Blueprint for CodeGuardian - Manus Enhanced Version
# Updated with latest AI models, MCP integration, and advanced features

services:
  # Main API Backend with Manus Features
  - type: web
    name: codeguardian-api-manus
    runtime: python3
    buildCommand: |
      cd codeguardian-backend && 
      pip install -r requirements_manus.txt &&
      python -c "import nltk; nltk.download('punkt')" || true
    startCommand: |
      cd codeguardian-backend && 
      gunicorn --worker-class gevent --workers 4 --bind 0.0.0.0:$PORT src.main_render:app
    envVars:
      - key: FLASK_ENV
        value: production
      - key: FLASK_APP
        value: src.main_render:app
      - key: DATABASE_URL
        fromDatabase:
          name: codeguardian-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: codeguardian-redis
          property: connectionString
      - key: OPENAI_API_KEY
        sync: false  # User must set this
      - key: OPENAI_API_BASE
        value: https://api.openai.com/v1
      - key: SECRET_KEY
        generateValue: true
      - key: JWT_SECRET_KEY
        generateValue: true
      - key: GITHUB_CLIENT_ID
        sync: false  # User must set this
      - key: GITHUB_CLIENT_SECRET
        sync: false  # User must set this
      - key: MANUS_VERSION
        value: "2.0"
      - key: ENABLE_MCP
        value: "true"
      - key: ENABLE_MULTI_MODEL
        value: "true"
      - key: ENABLE_REAL_TIME
        value: "true"
      - key: SENTRY_DSN
        sync: false  # Optional error tracking
    healthCheckPath: /health
    autoDeploy: true

  # Real-time WebSocket Service
  - type: web
    name: codeguardian-realtime
    runtime: python3
    buildCommand: |
      cd codeguardian-backend && 
      pip install -r requirements_manus.txt
    startCommand: |
      cd codeguardian-backend && 
      python src/realtime_server.py
    envVars:
      - key: REDIS_URL
        fromService:
          type: redis
          name: codeguardian-redis
          property: connectionString
      - key: OPENAI_API_KEY
        sync: false
      - key: WEBSOCKET_PORT
        value: "8080"
    port: 8080

  # Background Task Worker
  - type: worker
    name: codeguardian-worker
    runtime: python3
    buildCommand: |
      cd codeguardian-backend && 
      pip install -r requirements_manus.txt
    startCommand: |
      cd codeguardian-backend && 
      celery -A src.tasks worker --loglevel=info
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: codeguardian-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: codeguardian-redis
          property: connectionString
      - key: OPENAI_API_KEY
        sync: false
      - key: ENABLE_MCP
        value: "true"

  # Frontend Application
  - type: static
    name: codeguardian-frontend-manus
    buildCommand: |
      cd codeguardian-frontend && 
      npm install && 
      npm run build
    staticPublishPath: ./codeguardian-frontend/dist
    envVars:
      - key: VITE_API_URL
        fromService:
          type: web
          name: codeguardian-api-manus
          property: host
      - key: VITE_WS_URL
        fromService:
          type: web
          name: codeguardian-realtime
          property: host
      - key: VITE_MANUS_VERSION
        value: "2.0"
      - key: VITE_ENABLE_REAL_TIME
        value: "true"
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
    routes:
      - type: rewrite
        source: /*
        destination: /index.html

databases:
  # PostgreSQL Database with Enhanced Configuration
  - name: codeguardian-postgres
    databaseName: codeguardian
    user: codeguardian
    plan: starter  # Upgrade to standard for production
    region: oregon
    version: "15"
    postgresMajorVersion: 15

services:
  # Redis Cache for Real-time Features
  - type: redis
    name: codeguardian-redis
    plan: starter  # 25MB free tier
    maxmemoryPolicy: allkeys-lru
    region: oregon
    ipAllowList: []  # Allow all IPs

# Environment Groups for Shared Configuration
envVarGroups:
  - name: manus-ai-config
    envVars:
      - key: SUPPORTED_MODELS
        value: "gpt-4.1-mini,gpt-4.1-nano,gemini-2.5-flash"
      - key: DEFAULT_MODEL
        value: "gpt-4.1-mini"
      - key: ENABLE_MULTI_MODEL_ANALYSIS
        value: "true"
      - key: MAX_CODE_LENGTH
        value: "50000"
      - key: ANALYSIS_TIMEOUT
        value: "120"

  - name: mcp-config
    envVars:
      - key: MCP_SERVERS
        value: "prisma-postgres,supabase,notion,vercel"
      - key: MCP_TIMEOUT
        value: "30"
      - key: ENABLE_MCP_CACHING
        value: "true"

  - name: security-config
    envVars:
      - key: ENABLE_RATE_LIMITING
        value: "true"
      - key: RATE_LIMIT_PER_MINUTE
        value: "60"
      - key: ENABLE_CORS
        value: "true"
      - key: CORS_ORIGINS
        value: "*"
      - key: JWT_EXPIRATION_HOURS
        value: "24"

# Build and Deploy Hooks
buildCommand: |
  # Install system dependencies for MCP
  apt-get update && apt-get install -y git curl
  
  # Install Node.js for frontend build
  curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
  apt-get install -y nodejs
  
  # Verify installations
  python --version
  node --version
  npm --version

# Health Check Configuration
healthChecks:
  - path: /health
    interval: 30
    timeout: 10
    retries: 3
    startPeriod: 60

# Scaling Configuration
scaling:
  minInstances: 1
  maxInstances: 10
  targetCPUPercent: 70
  targetMemoryPercent: 80

# Monitoring and Alerts
alerts:
  - rule: cpu > 80
    duration: 5m
  - rule: memory > 90
    duration: 2m
  - rule: response_time > 2000ms
    duration: 1m

# Custom Domains (Optional)
# domains:
#   - name: api.codeguardian.dev
#     type: apex
#   - name: app.codeguardian.dev
#     type: subdomain

# Backup Configuration
backups:
  - service: codeguardian-postgres
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention: 7  # Keep 7 days of backups

# Deployment Notifications
notifications:
  - type: slack
    url: ${SLACK_WEBHOOK_URL}  # Optional
  - type: email
    addresses:
      - ${NOTIFICATION_EMAIL}  # Optional

